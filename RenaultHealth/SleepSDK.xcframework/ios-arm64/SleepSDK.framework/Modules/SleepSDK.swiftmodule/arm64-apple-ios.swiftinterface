// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios16.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name SleepSDK
import Combine
import Foundation
import HealthKit
@_exported import SleepSDK
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public func decode<T>(_ k: Swift.String, _ d: [Swift.String : Any]) throws -> T
public func decodeOptional<T>(_ k: Swift.String, _ d: [Swift.String : Any]) throws -> T?
precedencegroup DecoderPrecedence {
  higherThan: CastingPrecedence
}
infix operator <- : DecoderPrecedence
infix operator <~ : DecoderPrecedence
public struct SleepSessionTableValue : Swift.Hashable {
  public var titleString: Swift.String?
  public var valueString: Swift.String?
  public var highlightValue: Swift.Bool
  public var highlightAll: Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SleepSDK.SleepSessionTableValue, b: SleepSDK.SleepSessionTableValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public class HealthDataProvider {
  public var sleepValues: Combine.PassthroughSubject<[SleepSDK.SleepSessionTableValue], Swift.Never>
  public var sleepSegments: Combine.PassthroughSubject<[SleepSDK.SleepSegmentTableValue], Swift.Never>
  public var isLoading: Combine.PassthroughSubject<Swift.Bool, Swift.Never>
  public init()
  public func requestHealthKitPermission()
  public func fecthSleepData()
  @objc deinit
}
public struct SleepSegmentTableValue : Swift.Hashable {
  public var title: Swift.String
  public var start: Swift.String
  public var end: Swift.String
  public var duration: Swift.String
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SleepSDK.SleepSegmentTableValue, b: SleepSDK.SleepSegmentTableValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
